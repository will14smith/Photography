create-photograph:
  handler: Toxon.Photography::Toxon.Photography.CreatePhotographFunction::Handle
  events:
    - http:
        path: photograph
        method: post
        cors: true
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
list-photographs:
  handler: Toxon.Photography::Toxon.Photography.ListPhotographsFunction::Handle
  events:
    - http:
        path: photograph
        method: get
        cors: true
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
get-photograph:
  handler: Toxon.Photography::Toxon.Photography.GetPhotographFunction::Handle
  events:
    - http:
        path: photograph/{id}
        method: get
        request:
          parameters:
            paths:
              id: true
        cors: true
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
edit-photograph:
  handler: Toxon.Photography::Toxon.Photography.EditPhotographFunction::Handle
  events:
    - http:
        path: photograph/{id}
        method: put
        request:
          parameters:
            paths:
              id: true
        cors: true
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
edit-layout:
  handler: Toxon.Photography::Toxon.Photography.EditLayoutFunction::Handle
  events:
    - http:
        path: layout
        method: put
        cors: true
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer

# site generator
site-generator:
  handler: Toxon.Photography::Toxon.Photography.SiteGeneratorFunction::Handle
  timeout: 300
  environment:
    SSM_SiteGenerator_AccessKey: ${self:service}-${self:provider.stage}-SiteGeneratorSigningUser-AccessKey
    SSM_SiteGenerator_SecretKey: ${self:service}-${self:provider.stage}-SiteGeneratorSigningUser-SecretKey
  events:
    - schedule:
        rate: rate(1 day)
    - http:
        path: generate
        method: post
        cors: true
        # this function isn't configure for lambda_proxy so should just return a 204 using direct lambda invoke
        integration: lambda
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
        response:
          statusCodes:
            204:
              pattern: ""
