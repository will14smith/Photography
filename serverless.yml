service: photography

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  region: eu-west-2
  runtime: dotnetcore2.1

  environment:
    PHOTOGRAPH_TABLE: ${self:service}-${self:provider.stage}-photograph
    IMAGE_BUCKET: ${self:service}-${self:provider.stage}-image

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        Fn::GetAtt: [PhotographTable, Arn]
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
      Resource:
        Fn::GetAtt: [ImageBucket, Arn]

package:
  artifact: deploy/deploy-package.zip

functions:
  create-photograph:
    handler: Toxon.Photography::Toxon.Photography.CreatePhotographFunction::Handle
    events:
      - http:
          path: photograph
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  list-photographs:
    handler: Toxon.Photography::Toxon.Photography.ListPhotographsFunction::Handle
    events:
      - http:
          path: photograph
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

resources:
  Resources:
    PhotographTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.PHOTOGRAPH_TABLE}

    ImageBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        BucketName: ${self:provider.environment.IMAGE_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - PUT
              AllowedOrigins:
                - "*"

    UserAccessRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:provider.stage}-UserAccessRole
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: IdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: ${self:service}-${self:provider.stage}-UserAccessPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:PutObject
                  Resource:
                    Fn::Join:
                      - "/"
                      - - Fn::GetAtt:
                            - ImageBucket
                            - Arn
                        - "*"

    UserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        UserPoolName: ${self:service}-${self:provider.stage}
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
        AliasAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId:
          Ref: UserPool
        GenerateSecret: false
    IdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: "${self:service} ${self:provider.stage}"
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ProviderName:
              Fn::GetAtt: [UserPool, ProviderName]
            ClientId:
              Ref: UserPoolClient
    IdentityPoolRoleAttachment:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: IdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [UserAccessRole, Arn]

    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 300
        IdentitySource: method.request.header.Authorization
        Name: Cognito
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt:
              - UserPool
              - Arn

  Outputs:
    UserPoolId:
      Description: The UserPoolId for the frontend
      Value:
        Ref: UserPool
      Export:
        Name: ${self:service}:${self:provider.stage}:UserPoolId
    UserPoolWebClientId:
      Description: The UserPoolWebClientId for the frontend
      Value:
        Ref: UserPoolClient
      Export:
        Name: ${self:service}:${self:provider.stage}:UserPoolWebClientId
    IdentityPoolId:
      Description: The IdentityPoolId for the frontend
      Value:
        Ref: IdentityPool
      Export:
        Name: ${self:service}:${self:provider.stage}:IdentityPoolId
    ImageBucket:
      Description: The ImageBucket for the frontend
      Value:
        Ref: ImageBucket
      Export:
        Name: ${self:service}:${self:provider.stage}:ImageBucket
